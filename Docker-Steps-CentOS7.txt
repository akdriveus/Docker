================================================================
INSTALLATION
================================================================
# docker --version

# cd /etc/yum.repos.d

# vim docker.repo

	[dockerrepo]
	name=Docker Repository
	baseurl=https://yum.dockerproject.org/repo/main/centos/7/
	enabled=1
	gpgcheck=1
	gpgkey=https://yum.dockerproject.org/gpg

# yum update

# yum install -y docker-engine

# systemctl enable docker

# systemctl start docker
	# docker --version
	# docker images
			(shows what is installed - currently there no Base Image is installed)
			REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
	# logout
	$ docker images
			Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get 			http://%2Fvar%2Frun%2Fdocker.sock/v1.29/images/json: 	dial unix /var/run/docker.sock: connect: permission denied
	$ su -

# cd /var/run

	# ls -al dock*
			-rw-r--r--. 1 root root     4 Aug 10 15:57 docker.pid
			srw-rw----. 1 root docker   0 Aug 10 15:57 docker.sock <--- as a user I have to be able to connect to this file, which 			is owned by "root" and a "docker" user group

	# cat /etc/group | grep docker
			docker:x:988:		<--- no users associated with the "docker group"

# usermod -a -G docker user

	# cat /etc/group | grep docker
			docker:x:988:user	<--- the user "user" added to the group

--- relogin

$ docker images
			REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE   <--- as a user I'm able to 			connect to the docker dameon.


====> At this point I can pull, install images and run containers as a non-privileged user on the system.


================================================================

The Docker Hub - the most common public repository I will be pulling images from.
Base Images - It all starts with a base image. This is a foundation for containers.
I have to have a Base Image in order to run containers.

Here we will pull down a couple of base images and show how we can get some information
on what they are and how they were built.
================================================================

$ docker images
			REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE  	<--- I don't have any images 			created. Which means I can't run any containers.

$ docker search centos

$ docker pull hello-world

		$ docker images
			REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
			hello-world         latest              1815c82652c0        8 weeks ago         1.84kB

$ docker run hello-world:latest 		OR			$ docker run 1815c82652c0 <-- IMAGE ID

$ docker pull centos:centos6

$ docker pull centos

$ docker pull nginx:latest

		$ docker images
			REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
			centos              centos6             7ea307891843        6 days ago          194MB
			centos              latest              328edcd84f1b        6 days ago          193MB
			nginx               latest              b8efb18f159b        2 weeks ago         107MB
			hello-world         latest              1815c82652c0        8 weeks ago         1.84kB

$ docker inspect centos			OR			$ docker inspect 328edcd84f1b	<--- returns information about the image in JSON.


================================================================

Running Containers
================================================================

$ docker pull docker/whalesay

$ docker run docker/whalesay cowsay Hello

 _______
< Hello >
 -------
    \
     \
      \
                    ##        .
              ## ## ##       ==
           ## ## ## ##      ===
       /""""""""""""""""___/ ===
  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~
       \______ o          __/
        \    \        __/
          \____\______/


$ docker ps		<--- Shows what containers running on my system. Process list from within the Docker daemon.

		$ docker ps -a	<--- Shows containers in the "stop" state.

<<<TextMate>>>

$ docker inspect docker/whalesay	
									} <--- to figure out what this contaner was ment to do.
$ docker inspect centos


$ docker run -it centos:latest /bin/bash
			[root@802587d087ff /]# 
			
			-i	<== run the container in the interactive mode,
			t	<== connected to my current terminal or tty
			/bin/bash	<== the name of the command that I want my container to start up with.
			
	- Beacause I'm running it iteractivelly (-i) and on my terminal (t), it's gonna automatically attach me as the root user
	in the /bin/bash prompt.
			
			"In unix terminology,
			terminal = tty = text input/output environment
			console = physical terminal
			shell = command line interpreter"
			
			"A tty command in Linux and other Unix-like operating systems is a shell command that can be entered interactively or 			as part of a script to determine whether the output for the script is a terminal (that is, to an interactive user) or 
			to some other destination such as another program or a printer"
-----			
[root@11b58a130b8a /]# yum upgrade

			Will upgrade the packages from inside of my container, and install in my container all effected applications or all 			available updates.
			
		[root@11b58a130b8a /]# exit		<== to exit from the container. And the container will be stoped beecause the ""
			
		I'm no longer working on my host OS, I'm working on my container OS.
		My container OS isn't by all means a full OS. My container only contains the libraries and dependencies that are necessary
		to run e minimum amount of probgrams that I have installed.
	
		For Example: - there are no things like SSH
				 	 - telnet
				 
	The only command that is currently running on this container, is what I started it up with in an interactive mode, which is
	/bin/bash
	


[root@11b58a130b8a /]# exit	 <== to exit from the container. And the container will be stoped beecause the "/bin/bash" was stoped.
-----

$ docker run -d centos:latest /bin/bash

			To run the container in the detoched mode. The container runs without me being connected to it.
			It executes the command /bin/bash and closes.

$ docker run -it centos:latest /bin/bash -e dowhile	 

			If I want to write a script as par of my launching it, I could say execute a command (-e) and do the "dowhile" script,
			that actually runs constently untill I exit or attached to that container.

			-e	<== execute the command

-----
$ docker run -d nginx:latest
			
		$ docker ps
		
			CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
			614baa25efa8        nginx:latest        "nginx -g 'daemon off"   47 seconds ago      Up 46 seconds       80/tcp              eloquent_torvalds
		
		
		"NGINX is a web server or proxy server. Nginx used as reverse proxy server for HTTP, HTTPS, SMTP, IMAP, POP3 protocols, on
		the other hand, it is also used for servers load balancing and HTTP Cache."
		
		
		
$ docker inspect 614baa25efa8

			"Networks": {
			                "bridge": {
			                    "IPAMConfig": null,
			                    "Links": null,
			                    "Aliases": null,
			                    "NetworkID": "ecf01c96402e152ba3e2af8fdd667d48507cf32a1ba429a88e9a38a1454f742f",
			                    "EndpointID": "5b09b8386a3f077573e4e885c36e186047938cbfff2593aa47ec9b1dd2dc2290",
			                    "Gateway": "172.17.0.1",
			                    "IPAddress": "172.17.0.2",
			                    "IPPrefixLen": 16,
			                    "IPv6Gateway": "",
			                    "GlobalIPv6Address": "",
			                    "GlobalIPv6PrefixLen": 0,
			                    "MacAddress": "02:42:ac:11:00:02"

$ ping 172.17.0.2

			PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.
			64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.063 ms
			64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.041 ms
			64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.054 ms
			64 bytes from 172.17.0.2: icmp_seq=4 ttl=64 time=0.042 ms
			^C
			--- 172.17.0.2 ping statistics ---
			4 packets transmitted, 4 received, 0% packet loss, time 2999ms
			rtt min/avg/max/mdev = 0.041/0.050/0.063/0.009 ms
			
			>>> container is pinging.

# yum install elinks

			elinks - text-based web browser.

# elinks http://172.17.0.2

			Welcome to nginx!                                            
                                                                                                        
			   If you see this page, the nginx web server is successfully installed and working. Further            
			   configuration is required.                                                                           
                                                                                                        
			   For online documentation and support please refer to nginx.org.                                      
			   Commercial support is available at nginx.com.                                                        
                                                                                                        
			   Thank you for using nginx.
			   
			   >>> NGINX web server is installed and working.


	# yum install telnet
			   
			   
$ telnet 172.17.0.2 80
			Trying 172.17.0.2...
			Connected to 172.17.0.2.
			Escape character is '^]'.
			hello
			HTTP/1.1 400 Bad Request
			Server: nginx/1.13.3
			Date: Mon, 14 Aug 2017 21:18:23 GMT
			Content-Type: text/html
			Content-Length: 173
			Connection: close

			<html>
			<head><title>400 Bad Request</title></head>
			<body bgcolor="white">
			<center><h1>400 Bad Request</h1></center>
			<hr><center>nginx/1.13.3</center>
			</body>
			</html>
			Connection closed by foreign host.
			
			>>> This is expected response on "hello". NGINX works as expected.

$ docker stop 614baa25efa8			OR			docker stop eloquent_torvalds   (eloquent_torvalds is container's NAME)

			
		$ docker ps
		
			CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS         PORTS     NAMES
				
				
		$ docker ps -a
		
			CONTAINER ID        IMAGE                COMMAND                  CREATED        STATUS       PORTS           NAMES
			614baa25efa8        nginx:latest         "nginx -g 'daemon ..."   42 minutes ago      Exited (0) 11 seconds ago 			eloquent_torvalds
		

$ docker run -d --name=MyWEB1 nginx:latest

			--name=MyWEB1	<== giving a name to my container.
			
			
		$ docker ps
		CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS        NAMES
		b07ea92af34f        nginx:latest        "nginx -g 'daemon ..."   3 minutes ago       Up 3 minutes        80/tcp      MyWEB1
		
		
		$ docker inspect MyWEB1
		

$ docker stop b07ea92af34f			OR			$ docker stop MyWEB1

================================================================

The Container Lifecycle

We need to understand the lifecycle of our containers, so we talk about how to start, stop, restart and display their state.
================================================================

$ docker run 

		OR

$ docker run -d --name=LifeCycle1 nginx:latest
			 
			 -d to run the container in the background so I can use it.


$ docker attach LifeCycle1

$ docker start LifeCycle1

$ docker restart LifeCycle1

$ docker exec -it LifeCycle1 /bin/bash		==> will allow me to execute something in a running container without affecting the
											command or the process that was started by the container when it was instanciated.
											And by stopping just executed command, I will not exiting the container itself. 
											
				-it		<== interactivelly attached
											
$ docker stop b07ea92af34f			OR			$ docker stop LifeCycle1

================================================================

Image and Container Management

We know how to pull/install images and instantiate containers. 
Removing them is equally important but there are some caveats.
================================================================

$ docker rmi centos:centos6		<-- remove image

			$ docker rmi hello-world
					Error response from daemon: conflict: unable to remove repository reference "hello-world" (must force) - 					container 752960a0e544 is using its referenced image 1815c82652c0
					
$ docker rmi -f hello-world		<--  -f force removal

++++ TYPICALLY - I'll remove the containers that are a dependency upon the base image. So, the error, is the reminder that I probably have containers that I need this image for. Or I have containers that are stopped, that are based on that base image, and I probably don't need anymore.++++

$ docker rm wonderful_easley	OR		docker rm 752960a0e544		<-- remove the container

$ docker rm name name OR ID ID		<-- to remove multiple containers

$ docker ps -a -q		<-- returns IDs of containers that are stopped on my system

			088f3391c4e3
			4e9ec3f1e384
			6cc0605acbcf
			8ef4525d1743
			a131906febd7
			0e29c0af1a2f

$ docker rm `docker ps -a -q`		<-- bash command substitute. Pass to the "remove" command IDs of all stopped containers. These 										containers will be removed.

			088f3391c4e3
			4e9ec3f1e384
			6cc0605acbcf
			8ef4525d1743
			a131906febd7
			0e29c0af1a2f
			
================================================================

Redirection - Ports and Volumes
We have the ability to redirect container ports and volumes to our host operating system for ease of use and flexibility.
================================================================

PORTS			- are exposed(openned) in a container so that I can connect them through the container 				  IP, but they have to be exposed as part of the docker file.

				
				- to combat the routing problems, I'm going to direct the port that is listening for HTTP 				  on my container (nginx), to a port on my underlying host.
				
				- the are a couple of different ways I can do that:
				

		$ docker images
				
			REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
			centos              latest              328edcd84f1b        2 weeks ago         193MB
			nginx               latest              b8efb18f159b        3 weeks ago         107MB
			
		$ docker run -d nginx:latest
			
			91a32cd7a7332a3fade140a9bb09800cc8bf520c4bb6127a6a7bba3b63ec306f
			
		$ docker ps
		
			CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS          PORTS     NAMES
			91a32cd7a733   nginx:latest   "nginx -g 'daemon ..."   59 seconds ago  Up 58 seconds   80/tcp    kind_lalande
			
		$ docker inspect kind_lalande | grep IPAddr
			
			"SecondaryIPAddresses": null,
			            "IPAddress": "172.17.0.2",
			                    "IPAddress": "172.17.0.2",
								
								
		$ elinks http://172.17.0.2

					Welcome to nginx!                                            
                                                                                                        
					   If you see this page, the nginx web server is successfully installed and working. 
			   
					   >>> NGINX web server is installed and working.
					   
		

								
$ docker run -d --name=WebServer1 -P nginx:latest

					--> -P <-- It sayes, any ports that are exposed to my container, I want you to make available 					through the host OS on a random port between 32768 and 65000. This is a port range that is available for docker to pick randomly.

	$ docker ps
				
	  CONTAINER ID   IMAGE      COMMAND                  CREATED       STATUS           PORTS                   NAMES
	  190ef25498aa  nginx:latest "nginx -g 'daemon ..."  17 sec ago   Up 17 seconds   0.0.0.0:32768->80/tcp   WebServer1
	  
	  --> 0.0.0.0:32768->80/tcp This means that the port 32768 is bound all local interfaces. localhost as well as the IP that's assigned to this localhost. Also it is directing the traffic to port 80.
	  
	  --> I could have bound just the localhost 172.0.0.1, If I wanted to. 
	  OR, if I had multiple IP adresses on the system and multiple ethernet adapters, I could bind it to just one particuilar.
	  
$ elinks http://172.17.0.2

			Welcome to nginx!
			
$ elinks http://localhost:32768

			Welcome to nginx!
			
$ docker port WebServer1 $CONTAINERPORT
		80/tcp -> 0.0.0.0:32769
		

			$ docker stop WebServer1
			


$ docker run -d -p 8080:80 --name=WebServer2 nginx:latest	<-- Bind a local port 8080 to container port 80

	CONTAINER ID   IMAGE        COMMAND                CREATED         STATUS             PORTS                  NAMES
	79697438174e   nginx:latest "nginx -g 'daemon ..." About a minute  Up About a minute  0.0.0.0:8080->80/tcp   WebServer2

	$ docker run -d -p 8080:80, 8443:443 --name=WebServer2 nginx:latest <-- Bind multiple local ports to container ports

$ elinks http://localhost:8080
		
		Welcome to nginx!


I can mount directories from my underlieng hosts inside my container.

--- 1st Way --- The first way we can do a container that mounts a particuilar directory:

$ docker run -d -p 8080:80 --name=WebServer3 -v /mnt/data nginx:latest  
		
		17dc1e8015710e1ec198a98d3281912757fbb5f38dd10b656592f740b7423d69
		    
			<-- I've created a container that has a mount point /mnt/data inside of that container.


One of the best practicies for Docker is to maintain my docker containers portable as possible, and they should not contain things that are intendent to stick around. I should be able to launch a new container with relatively little interaction. I should just be able to run a command and start the container without having to worry about the complex configuration inside the container.

$ mkdir www

$ cd www

$ vim index.html

		<HTML>

		<HEAD></HEAD>

		<BODY>

		<HR/>
		THIS IS A TEST PAGE
		<HR/>

		</BODY>

		</HTML>

$ docker run -d -p 8080:80 --name=WebServer4 -v /home/usr/www:/usr/share/nginx/html nginx:latest

	 	- calling the "docker" daemon 
		- to "run"
		- in disconnected mode "-d"
		- mapping the host port "-p" "8080" to the container port "80"
		- calling it WebServer4 "--name=WebServer4"
		- creating a volume mount "-v" from /home/usr/www on my host to the remote container wffwe
		- calling in an image "nginx:latest"
	
	51094356d865732f227bde8074f7ea3e286212d11f4eb96da92f89571747d662

 Evrytime I change my underlying file I don't have to do anything with my container.
 
 
================================================================


The Dockerfile
How to create your own base images. The Dockerfile will show you how.
================================================================

$ mkdir Builds

$ cd Builds

		$ docker images
			
			REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
			centos              latest              328edcd84f1b        2 weeks ago         193MB
			nginx               latest              b8efb18f159b        4 weeks ago         107MB
			
		$ docker ps
		
			CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS          PORTS           NAMES
			
		
		$ docker ps -a
		
			CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS          PORTS           NAMES
			
$ vim Dockerfile

		FROM debian:stable
		MAINTAINER akdriveus <akdriveus@gmail.com>

		RUN apt-get update
		RUN apt-get upgrade
		
$ docker build -t  aktest1/myapache .			"." pull the docker file from the local directory

				Sending build context to Docker daemon  2.048kB
				Step 1/4 : FROM debian:stable
				stable: Pulling from library/debian
				105cbe84bc50: Pull complete 
				Digest: sha256:333902dfe6e06e2e51002dc7c84855fb7e5fd88e21a4c863620fdfe2ccd70fc6
				Status: Downloaded newer image for debian:stable
				 ---> c5f70b742a9d
				Step 2/4 : MAINTAINER akdriveus <akdriveus@gmail.com>
				 ---> Running in b0f167b61c1f
				 ---> f20ffdfade9f
				Removing intermediate container b0f167b61c1f
				Step 3/4 : RUN apt-get update
				 ---> Running in 954e2014406b
				Get:1 http://security.debian.org stable/updates InRelease [62.9 kB]
				Get:2 http://security.debian.org stable/updates/main amd64 Packages [177 kB]
				Ign:3 http://deb.debian.org/debian stable InRelease
				Get:4 http://deb.debian.org/debian stable-updates InRelease [88.5 kB]
				Get:5 http://deb.debian.org/debian stable Release [118 kB]
				Get:6 http://deb.debian.org/debian stable Release.gpg [2373 B]
				Get:7 http://deb.debian.org/debian stable/main amd64 Packages [9497 kB]
				Fetched 9946 kB in 2s (4946 kB/s)
				Reading package lists...
				 ---> 0ad191c068dd
				Removing intermediate container 954e2014406b
				Step 4/4 : RUN apt-get upgrade
				 ---> Running in ff63a1a6df67
				Reading package lists...
				Building dependency tree...
				Reading state information...
				Calculating upgrade...
				0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
				 ---> 4dc15e66c763
				Removing intermediate container ff63a1a6df67
				Successfully built 4dc15e66c763
				Successfully tagged aktest1/myapache:latest


		$ docker images
		
		REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
		aktest1/myapache    latest              4dc15e66c763        3 minutes ago       116MB
		centos              latest              328edcd84f1b        2 weeks ago         193MB
		nginx               latest              b8efb18f159b        4 weeks ago         107MB
		debian              stable              c5f70b742a9d        4 weeks ago         100MB
		

$ vim Dockerfile

		FROM debian:stable
		MAINTAINER akdriveus <akdriveus@gmail.com>

		RUN apt-get update
		RUN apt-get upgrade
		RUN apt-get install telnet

$ docker build -t  aktest1/myapache .

				Sending build context to Docker daemon  2.048kB
				Step 1/5 : FROM debian:stable
				 ---> c5f70b742a9d
				Step 2/5 : MAINTAINER akdriveus <akdriveus@gmail.com>
				 ---> Using cache
				 ---> f20ffdfade9f
				Step 3/5 : RUN apt-get update
				 ---> Using cache
				 ---> 0ad191c068dd
				Step 4/5 : RUN apt-get upgrade
				 ---> Using cache
				 ---> 4dc15e66c763
				Step 5/5 : RUN apt-get install telnet
				 ---> Running in 83fdade55bf6
				Reading package lists...
				Building dependency tree...
				Reading state information...
				The following NEW packages will be installed:
				  telnet
				0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
				Need to get 72.0 kB of archives.
				After this operation, 161 kB of additional disk space will be used.
				Get:1 http://deb.debian.org/debian stable/main amd64 telnet amd64 0.17-41 [72.0 kB]
				debconf: delaying package configuration, since apt-utils is not installed
				Fetched 72.0 kB in 0s (352 kB/s)
				Selecting previously unselected package telnet.
				(Reading database ... 6491 files and directories currently installed.)
				Preparing to unpack .../telnet_0.17-41_amd64.deb ...
				Unpacking telnet (0.17-41) ...
				Setting up telnet (0.17-41) ...
				update-alternatives: using /usr/bin/telnet.netkit to provide /usr/bin/telnet (telnet) in auto mode
				 ---> 6a5d8c482c9b
				Removing intermediate container 83fdade55bf6
				Successfully built 6a5d8c482c9b
				Successfully tagged aktest1/myapache:latest

--------------------------- Example: The Docker file contains an invalid command : Start ---------------------------
		$ vim Dockerfile
		
			FROM debian:stable
			MAINTAINER akdriveus <akdriveus@gmail.com>

			RUN apt-get update
			RUN apt-get upgrade
			RUN apt-get install telnet
			RUN my-command				<-- INVALID COMMAND
		
		$ docker build -t  aktest1/myapache .
		
				Sending build context to Docker daemon  2.048kB
				Step 1/6 : FROM debian:stable
				 ---> c5f70b742a9d
				Step 2/6 : MAINTAINER akdriveus <akdriveus@gmail.com>
				 ---> Using cache
				 ---> f20ffdfade9f
				Step 3/6 : RUN apt-get update
				 ---> Using cache
				 ---> 0ad191c068dd
				Step 4/6 : RUN apt-get upgrade
				 ---> Using cache
				 ---> 4dc15e66c763
				Step 5/6 : RUN apt-get install telnet
				 ---> Using cache
				 ---> 6a5d8c482c9b
				Step 6/6 : RUN my-command
				 ---> Running in f75b4c63987e
				/bin/sh: 1: my-command: not found
				The command '/bin/sh -c my-command' returned a non-zero code: 127

		$ docker rmi aktest1/myapache

			Untagged: aktest1/myapache:latest
			Deleted: sha256:6a5d8c482c9b77969a4cb8ba94385d645537f8df6bed1dfd7c304f6335010705
			Deleted: sha256:01d8003911a4b38529911d92074167ba83c2464a6d6ded386e1ab049633fd1ab
			Deleted: sha256:4dc15e66c763f505312884b8cd829f7351eb4d025f9559cc98a17723d305094d
			Deleted: sha256:cdddcc76256b6b79f13bc67a49b0277f34502575ce7d066edbe21150f4c08fed
			Deleted: sha256:0ad191c068dd20c23a956c5161e888a172e15a942f9bd56c408387e8f505d6ff
			Deleted: sha256:3a7021dd41897a733afd72407b4a9543f2aba453fb507f745a008b2f16c9b77b
			Deleted: sha256:f20ffdfade9f89d73184d3a982b1caaa3527e99ed39ab3997d63ade59d5bacfc
		
		$ vim Dockerfile	<-- REMOVING THE INVALID COMMAND

				FROM debian:stable
				MAINTAINER akdriveus <akdriveus@gmail.com>

				RUN apt-get update
				RUN apt-get upgrade
				RUN apt-get install telnet
		
		$ docker build -t  aktest1/myapache .
		
				Sending build context to Docker daemon  2.048kB
				Step 1/5 : FROM debian:stable
				 ---> c5f70b742a9d
				Step 2/5 : MAINTAINER akdriveus <akdriveus@gmail.com>
				 ---> Running in a4c46e154e4f
				 ---> 4678a5bfa190
				Removing intermediate container a4c46e154e4f
				Step 3/5 : RUN apt-get update
				 ---> Running in 10cc206fe8cd
				Ign:1 http://deb.debian.org/debian stable InRelease
				Get:2 http://deb.debian.org/debian stable-updates InRelease [88.5 kB]
				Get:3 http://deb.debian.org/debian stable Release [118 kB]
				Get:4 http://security.debian.org stable/updates InRelease [62.9 kB]
				Get:5 http://deb.debian.org/debian stable Release.gpg [2373 B]
				Get:6 http://deb.debian.org/debian stable/main amd64 Packages [9497 kB]
				Get:7 http://security.debian.org stable/updates/main amd64 Packages [177 kB]
				Fetched 9946 kB in 1s (5327 kB/s)
				Reading package lists...
				 ---> 0c1c8766e0f7
				Removing intermediate container 10cc206fe8cd
				Step 4/5 : RUN apt-get upgrade
				 ---> Running in e748794dbcfb
				Reading package lists...
				Building dependency tree...
				Reading state information...
				Calculating upgrade...
				0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
				 ---> 3a5d039e53a9
				Removing intermediate container e748794dbcfb
				Step 5/5 : RUN apt-get install telnet
				 ---> Running in e21c29e5115a
				Reading package lists...
				Building dependency tree...
				Reading state information...
				The following NEW packages will be installed:
				  telnet
				0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
				Need to get 72.0 kB of archives.
				After this operation, 161 kB of additional disk space will be used.
				Get:1 http://deb.debian.org/debian stable/main amd64 telnet amd64 0.17-41 [72.0 kB]
				debconf: delaying package configuration, since apt-utils is not installed
				Fetched 72.0 kB in 0s (1835 kB/s)
				Selecting previously unselected package telnet.
				(Reading database ... 6491 files and directories currently installed.)
				Preparing to unpack .../telnet_0.17-41_amd64.deb ...
				Unpacking telnet (0.17-41) ...
				Setting up telnet (0.17-41) ...
				update-alternatives: using /usr/bin/telnet.netkit to provide /usr/bin/telnet (telnet) in auto mode
				 ---> daa26da2b755
				Removing intermediate container e21c29e5115a
				Successfully built daa26da2b755
				Successfully tagged aktest1/myapache:latest
--------------------------- Example: The Docker file contains an invalid command : End ---------------------------

$ vim Dockerfile

		FROM debian:stable
		MAINTAINER akdriveus <akdriveus@gmail.com>

		RUN apt-get update
		RUN apt-get upgrade

$ docker build -t  aktest1/myapache . 

( The docker will used chashed copies "---> Using cache" for any commands and any layers that were previously ran that match exactly the commands that we're looking to build from)

				Sending build context to Docker daemon  2.048kB
				Step 1/4 : FROM debian:stable
				 ---> c5f70b742a9d
				Step 2/4 : MAINTAINER akdriveus <akdriveus@gmail.com>
				 ---> Using cache
				 ---> 4678a5bfa190
				Step 3/4 : RUN apt-get update
				 ---> Using cache
				 ---> 0c1c8766e0f7
				Step 4/4 : RUN apt-get upgrade
				 ---> Using cache
				 ---> 3a5d039e53a9
				Successfully built 3a5d039e53a9
				Successfully tagged aktest1/myapache:latest

$ vim Dockerfile

		FROM debian:stable
		MAINTAINER akdriveus <akdriveus@gmail.com>

		RUN apt-get update && apt-get upgrade -y && apt-get install -y apache2 telnet elinks openssh-server
		
				
			<-- This is a best practice. If I can group commands together without causing any issues, then I can save some disk space.
			<-- Doing it with && , so if any of the comand failed, it doesn't try to continue on.


$ docker build -t  aktest1/myapache .

				Sending build context to Docker daemon  2.048kB
				Step 1/4 : FROM debian:stable
				 ---> c5f70b742a9d
				Step 2/4 : MAINTAINER akdriveus <akdriveus@gmail.com>
				 ---> Using cache
				 ---> 4678a5bfa190
				Step 3/4 : RUN apt-get update
				 ---> Using cache
				 ---> 0c1c8766e0f7
				Step 4/4 : RUN apt-get upgrade
				 ---> Using cache
				 ---> 3a5d039e53a9
				Successfully built 3a5d039e53a9
				Successfully tagged aktest1/myapache:latest
				[user@akdriveus3 Builds]$ vim Dockerfile
				[user@akdriveus3 Builds]$ docker build -t  aktest1/myapache .
				Sending build context to Docker daemon  2.048kB
				Step 1/3 : FROM debian:stable
				 ---> c5f70b742a9d
				Step 2/3 : MAINTAINER akdriveus <akdriveus@gmail.com>
				 ---> Using cache
				 ---> 4678a5bfa190
				Step 3/3 : RUN apt-get update && apt-get upgrade -y && apt-get install -y apache2 telnet elinks openssh-server
				 ---> Running in 81fd096df4cd
				Get:1 http://security.debian.org stable/updates InRelease [62.9 kB]
				Ign:2 http://deb.debian.org/debian stable InRelease
				Get:3 http://deb.debian.org/debian stable-updates InRelease [88.5 kB]
				Get:4 http://security.debian.org stable/updates/main amd64 Packages [177 kB]
				Get:5 http://deb.debian.org/debian stable Release [118 kB]
				Get:6 http://deb.debian.org/debian stable Release.gpg [2373 B]
				Get:7 http://deb.debian.org/debian stable/main amd64 Packages [9497 kB]
				Fetched 9946 kB in 1s (5006 kB/s)
				Reading package lists...
				Reading package lists...
				Building dependency tree...
				Reading state information...
				Calculating upgrade...
				0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
				Reading package lists...
				Building dependency tree...
				Reading state information...
				The following additional packages will be installed:
				...
				...
				Setting up libpam-systemd:amd64 (232-25+deb9u1) ...
				debconf: unable to initialize frontend: Dialog
				debconf: (TERM is not set, so the dialog frontend is not usable.)
				debconf: falling back to frontend: Readline
				Processing triggers for libc-bin (2.24-11+deb9u1) ...
				Processing triggers for sgml-base (1.29) ...
				Processing triggers for dbus (1.10.18-1) ...
				 ---> d0d79fca8bc3
				Removing intermediate container 81fd096df4cd
				Successfully built d0d79fca8bc3
				Successfully tagged aktest1/myapache:latest


				<-- Step 3/3 : is a single command that does multiple stuff.

--------------------------- Example: Environmental value : Start ---------------------------

$ vim Dockerfile

		FROM debian:stable
		MAINTAINER akdriveus <akdriveus@gmail.com>

		RUN apt-get update && apt-get upgrade -y && apt-get install -y apache2 telnet elinks openssh-server

		ENV MYVALUE my-value


$ docker build -t  aktest1/myapache .

		Sending build context to Docker daemon  2.048kB
		Step 1/4 : FROM debian:stable
		 ---> c5f70b742a9d
		Step 2/4 : MAINTAINER akdriveus <akdriveus@gmail.com>
		 ---> Using cache
		 ---> 4678a5bfa190
		Step 3/4 : RUN apt-get update && apt-get upgrade -y && apt-get install -y apache2 telnet elinks openssh-server
		 ---> Using cache
		 ---> d0d79fca8bc3
		Step 4/4 : ENV MYVALUE my-value
		 ---> Running in 1da8d3eedfb2
		 ---> 5347ab2250ca
		Removing intermediate container 1da8d3eedfb2
		Successfully built 5347ab2250ca
		Successfully tagged aktest1/myapache:latest

$ docker run -it aktest1/myapache:latest /bin/bash

root@99bf605b0133:/# echo $MYVALUE

		my-value

root@99bf605b0133:/# exit

--------------------------- Example: Environmental value : End ---------------------------


$ docker rm `docker ps -a -q`


--------------------------- Example: EXPOSE PORTS : Start ---------------------------

$ vim Dockerfile

		FROM debian:stable
		MAINTAINER akdriveus <akdriveus@gmail.com>

		RUN apt-get update && apt-get upgrade -y && apt-get install -y apache2 telnet elinks openssh-server

		ENV MYVALUE my-value

		EXPOSE 80
		EXPOSE 22
		
		
		<-- EXPOSE PORTS through my container to my underlying host OS with that port mapping redirect.

$ docker build -t  aktest1/myapache .

			Sending build context to Docker daemon  2.048kB
			Step 1/6 : FROM debian:stable
			 ---> c5f70b742a9d
			Step 2/6 : MAINTAINER akdriveus <akdriveus@gmail.com>
			 ---> Using cache
			 ---> 4678a5bfa190
			Step 3/6 : RUN apt-get update && apt-get upgrade -y && apt-get install -y apache2 telnet elinks openssh-server
			 ---> Using cache
			 ---> d0d79fca8bc3
			Step 4/6 : ENV MYVALUE my-value
			 ---> Using cache
			 ---> 5347ab2250ca
			Step 5/6 : EXPOSE 80
			 ---> Running in a1dda9924f2e
			 ---> f51c94278056
			Removing intermediate container a1dda9924f2e
			Step 6/6 : EXPOSE 22
			 ---> Running in 92f3dbac8230
			 ---> af5dcb1874a7
			Removing intermediate container 92f3dbac8230
			Successfully built af5dcb1874a7
			Successfully tagged aktest1/myapache:latest

$ docker run -it aktest1/myapache:latest /bin/bash

		<-- runns/creates the container of just build image.

root@9acb875fec54:/# ssh user@akdriveus3

			The authenticity of host 'akdriveus3 (34.212.28.153)' can't be established.
			ECDSA key fingerprint is SHA256:Sh5ax5mN3cu8H3XPP7z783SBW2bFRN5+N+7GV218N2k.
			Are you sure you want to continue connecting (yes/no)? yes
			Warning: Permanently added 'akdriveus3,34.212.28.153' (ECDSA) to the list of known hosts.
			user@akdriveus3's password:

	$ docker ps
			
	CONTAINER ID  IMAGE                   COMMAND       CREATED             STATUS              PORTS               NAMES
	9acb875fec54  aktest1/myapache:latest "/bin/bash"   4 minutes ago       Up 4 minutes        22/tcp, 80/tcp      agitated_dubinsky
	
	[user@akdriveus3 ~]$ exit
	
root@9acb875fec54:/# exit

--------------------------- Example: EXPOSE PORTS : End ---------------------------


$ docker rm `docker ps -a -q`


--------------------------- Example: Starting Services : Start ---------------------------

$ vim Dockerfile

		FROM debian:stable
		MAINTAINER akdriveus <akdriveus@gmail.com>

		RUN apt-get update && apt-get upgrade -y && apt-get install -y apache2 telnet elinks openssh-server

		ENV MYVALUE my-value

		EXPOSE 80

		CMD ["/usr/sbin/apache2ctl", "-D", "FOREGROUND"]
		
		
		<-- RUN applies to the base image
		<-- CMD applies to the container that based upon the base image
		<-- Everything is in a list for the command. I'm going to list the things that I want, including the parameters.
		<-- "-D" because I'm not going to be running in a daemon mode.
		<-- run in "FOREGROUND"
		<-- This command and the options that are going to be passesed to the command that will run on any container by default when it is instantiated based on the base image.

$ docker build -t aktest1/myapache .

			Sending build context to Docker daemon  14.85kB
			Step 1/6 : FROM debian:stable
			 ---> c5f70b742a9d
			Step 2/6 : MAINTAINER akdriveus <akdriveus@gmail.com>
			 ---> Using cache
			 ---> 4678a5bfa190
			Step 3/6 : RUN apt-get update && apt-get upgrade -y && apt-get install -y apache2 telnet elinks openssh-server
			 ---> Using cache
			 ---> d0d79fca8bc3
			Step 4/6 : ENV MYVALUE my-value
			 ---> Using cache
			 ---> 5347ab2250ca
			Step 5/6 : EXPOSE 80
			 ---> Using cache
			 ---> f51c94278056
			Step 6/6 : CMD /usr/sbin/apache2ctl -D FOREGROUND
			 ---> Running in e620cd8e8b65
			 ---> 684206a78f95
			Removing intermediate container e620cd8e8b65
			Successfully built 684206a78f95
			Successfully tagged aktest1/myapache:latest
			
$ docker run -d aktest1/myapache:latest

		fc54c7e2fb1198501ecc30e8d5c95e6846314aee882b9d0c0e508949a67b2478
		
$ docker inspect stupefied_morse | grep IPAddr

		"SecondaryIPAddresses": null,
		"IPAddress": "172.17.0.2",
		        "IPAddress": "172.17.0.2",

$ elinks 172.17.0.2

			Apache2 Debian Default Page: It works
			

	$ docker ps
			
	CONTAINER ID  IMAGE                    COMMAND                  CREATED        STATUS        PORTS        NAMES
	fc54c7e2fb11  aktest1/myapache:latest  "/usr/sbin/apache2..."   About an hour  Up an hour    80/tcp       stupefied_morse

$ docker exec -it fc54c7e2fb11 /bin/bash

root@fc54c7e2fb11:/# ps aux | grep apache

	root         1  0.0  0.0   4284   696 ?        Ss   19:00   0:00 /bin/sh /usr/sbin/apache2ctl -D FOREGROUND
	root        13  0.0  0.3  75604  3316 ?        S    19:00   0:00 /usr/sbin/apache2 -D FOREGROUND
	www-data    14  0.0  0.4 430364  4876 ?        Sl   19:00   0:00 /usr/sbin/apache2 -D FOREGROUND
	www-data    15  0.0  0.4 364764  4316 ?        Sl   19:00   0:00 /usr/sbin/apache2 -D FOREGROUND
	root        77  0.0  0.0  11108   704 ?        S+   20:04   0:00 grep apache

root@fc54c7e2fb11:/# echo $MYVALUE

	my-value

root@fc54c7e2fb11:/# exit
--------------------------- Example: Starting Services : End ---------------------------
